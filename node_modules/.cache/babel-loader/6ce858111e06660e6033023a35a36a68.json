{"ast":null,"code":"var _jsxFileName = \"/Users/musta88/Development/code/Module4/property-managment/front-end-property-managment/src/components/dashboard/issues/IssueList.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst IssueList = ({\n  issues\n}) => {\n  const useStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper\n    }\n  }));\n  const classes = useStyles();\n  const [checkedDone, setChecked] = React.useState([false]);\n\n  const handleToggle = issue => () => {\n    setChecked(issue.isCompleted);\n    debugger;\n    const confObj = {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        isCompleted: !issue.isCompleted\n      })\n    };\n    fetch(`http://localhost:3001/issues/${issue.id}`, confObj).then(resp => resp.json()).then(obj => console.log(obj));\n  }; // const renderIssues = issues.map(issue =>\n  //   <Link key={issue.id} to={`/issues/${issue.id}`}  > <h1>{issue.message}</h1> </Link>\n  //   )\n\n\n  return /*#__PURE__*/React.createElement(List, {\n    dense: true,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, issues.map(issue => {\n    const labelId = `checkbox-list-secondary-label-${issue.message}`;\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: issue.id,\n      button: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Avatar // alt={`Avatar n°${issues + 1}`}\n    // src={`/static/images/avatar/${value + 1}.jpg`}\n    , {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      id: labelId,\n      primary: ` ${issue.message}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(ListItemSecondaryAction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      edge: \"end\",\n      onChange: handleToggle(issue),\n      checked: issue.isCompleted ? true : false,\n      inputProps: {\n        'aria-labelledby': labelId\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    })));\n  }));\n};\n\nexport default IssueList;","map":{"version":3,"sources":["/Users/musta88/Development/code/Module4/property-managment/front-end-property-managment/src/components/dashboard/issues/IssueList.js"],"names":["React","Component","Link","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","ListItemAvatar","Checkbox","Avatar","IssueList","issues","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","classes","checkedDone","setChecked","useState","handleToggle","issue","isCompleted","confObj","method","headers","body","JSON","stringify","fetch","id","then","resp","json","obj","console","log","map","labelId","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\n\n\nconst IssueList = ({issues}) => {\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }));\n  const classes = useStyles();\n  const [checkedDone, setChecked] = React.useState([false]);\n\n\n  const handleToggle = (issue) => () => {\n    setChecked(issue.isCompleted)\n    debugger\n    const confObj = {\n      method: \"PATCH\",\n      headers:{\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        isCompleted: !issue.isCompleted\n      })\n    }\n\n    fetch(`http://localhost:3001/issues/${issue.id}`, confObj)\n    .then(resp => resp.json())\n    .then(obj => console.log(obj))\n    \n  };\n\n\n  // const renderIssues = issues.map(issue =>\n\n  //   <Link key={issue.id} to={`/issues/${issue.id}`}  > <h1>{issue.message}</h1> </Link>\n  //   )\n\n\n\n    return (\n      <List dense className={classes.root}>\n        {issues.map((issue) => {\n          const labelId = `checkbox-list-secondary-label-${issue.message}`;\n            \n          return (\n            \n            <ListItem key={issue.id} button>\n         \n              <ListItemAvatar>\n            \n                <Avatar\n                  // alt={`Avatar n°${issues + 1}`}\n                  // src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={labelId} primary={` ${issue.message}`} />\n              <ListItemSecondaryAction>\n    \n                <Checkbox\n                \n                  edge=\"end\"\n                  onChange={(handleToggle(issue))}\n                  checked={issue.isCompleted? true : false}\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />\n                   {/* <Checkbox\n                  edge=\"end\"\n                  onChange={handleToggle(issue)}\n                  checked={checked.indexOf(issue) !== -1}\n                  inputProps={{ 'aria-labelledby': labelId }}\n                /> */}\n              </ListItemSecondaryAction>\n            </ListItem>\n          );\n        })}\n      </List>\n    );\n      }\n\n\nexport default IssueList\n\n\n\n\n\n  \n  \n"]},"metadata":{},"sourceType":"module"}